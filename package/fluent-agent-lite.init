#!/bin/bash
#
# fluent-agent-lite
# chkconfig:   - 85 15
# description: log transfer agent, for Fluentd's 'forward' input.
# config:      /etc/fluent-agent-lite.conf

prog="fluent-agent-lite"

scriptpath="/usr/local/fluent-agent-lite/bin/"$prog

if [ ! -x $scriptpath ]; then
    echo "Not installed properly"
    exit 1
fi

CONFIG_FILE=/etc/fluent-agent-lite.conf
if [ ! -r $CONFIG_FILE ]; then
    echo "Config file does not exists: "$CONFIG_FILE
    exit 1
fi
source $CONFIG_FILE

PID_FILE=/var/run/fluent-agent-lite.pid

RETVAL=0

start() {
    echo -n $"Starting $prog: "

    touch $PID_FILE
    if [ ! -w $PID_FILE ]; then
        echo "Cannot touch pid file: "$PID_FILE
        exit 1
    fi
    pids=$(cat $PID_FILE | wc -l | awk '{print $1;}')
    if [ "x""$pids" != 'x0' ]; then
        echo "process already running? check pidfile: "$PID_FILE
        return 1;
    fi

    lines=$(echo "$LOGS" | grep -v '^#' | grep -v '^$' | wc -l | awk '{print $1;}')
    if [ x"$LOGS" = "x" -o $lines -lt 1 ]; then
        echo "No input logfiles specified."
        return 1;
    fi
    if [ "x"$FORCE_START = "x" -o "x"$FORCE_START = "xno" -o "x"$FORCE_START = "x0" -o "x"$FORCE_START = "xfalse" ]; then
        for (( i = 0; i < $lines; i++ )); do
            lineno=$((i + 1))
            line=$(echo "$LOGS" | grep -v '^#' | tail -n $lineno | head -n 1)
            path=$(echo $line | awk '{print $2;}')
            if [ ! -r "$path" ]; then
                echo "$path does not exist or is not readable."
                return 1;
            fi
        done
    fi
    for (( i = 0; i < $lines; i++ )); do
        COMMANDLINE=$(build_command_line $i)
        $COMMANDLINE &

        CPID=$!
        disown $CPID > /dev/null 2>&1
        echo $CPID >> $PID_FILE
    done
    RETVAL=1
    for (( retries = 0 ; retries < 10 ; retries++ )); do
        running=$(cat $PID_FILE | while read p ; do if ps -p $p > /dev/null; then echo -n ""; else echo -n "1"; fi; done);
        if [ "x"$running = "x" ]; then
            RETVAL=0
            break
        fi
        sleep 1
    done
    if [ $RETVAL = 0 ]; then
        echo "ok."
    else
        echo "failed. (timeout after 10sec)"
    fi
    return $RETVAL
}
stop() {
    echo -n $"Stopping $prog: "
    touch $PID_FILE
    if [ ! -w $PID_FILE ]; then
        echo "Cannot touch pid file: "$PID_FILE
        exit 1
    fi
    cat $PID_FILE | while read pid ; do
        kill -s TERM $pid > /dev/null 2>&1
    done
    RETVAL=1
    for (( retries = 0 ; retries < 10 ; retries++ )); do
        running=$(cat $PID_FILE | while read p ; do if ps -p $p > /dev/null; then echo -n "1"; fi; done);
        if [ "x"$running = "x" ]; then
            RETVAL=0
            break
        fi
        sleep 1
    done

    if [ $RETVAL = 0 ]; then
        echo "ok."
        rm -f $PID_FILE
    else
        echo "failed. (timeout after 10sec)"
    fi
    return $RETVAL
}
reload() {
    echo -n $"Reloading $prog: "
    cat $PID_FILE | while read pid ; do
        kill -s HUP $pid > /dev/null 2>&1
    done
    echo "reset connections."
    echo "To run with new config file, do 'restart'."
    RETVAL=0
    return $RETVAL
}
status() {
    echo -n "Checking $prog: "
    if [ ! -f $PID_FILE ]; then
        working=0
    else
        working=$(cat $PID_FILE | wc -l | awk '{print $1;}')
    fi
    if [ "x"$working != x"0" ]; then
        status=$(cat $PID_FILE | while read p ; do if ps -p $p > /dev/null; then echo -n "" ; else echo -n "1"; fi; done);
    fi
    RETVAL=1
    if [ "x""$working" = "x0" -o "x"$status = "x" ]; then
        RETVAL=0
    fi
    if [ $RETVAL = 0 ]; then
        if [ "x"$working = "x0" ]; then
            echo "not running, ok"
        else
            echo "ok."
        fi
    else
        echo "not running correctly."
    fi
    return $RETVAL
}

PREPARE_GLOBAL=""

if [ "x"$PERL_PATH = "x" ]; then
    PERL_PATH="perl"
fi

NICE_PART=""
TAG_PREFIX_STRING=""
OPTIONS_PART=""
ARGS_SERVER_PART=""
function prepare_build {
    if [ "x"$PREPARE_GLOBAL != "x" ]; then
        return
    fi

    if [ "x"$TAG_PREFIX != "x" ]; then
        TAG_PREFIX_STRING=$TAG_PREFIX"."
    fi

    if [ "x"$PRIMARY_SERVER != "x" ]; then
        if [ "x"$SECONDARY_SERVER != "x" ]; then
            ARGS_SERVER_PART=$PRIMARY_SERVER" "$SECONDARY_SERVER
        else
            ARGS_SERVER_PART=$PRIMARY_SERVER
        fi
    else
        if [ "x"$PRIMARY_SERVERS_LIST != "x" ]; then
            OPTIONS_PART="-p "$PRIMARY_SERVERS_LIST
            if [ "x"$SECONDARY_SERVERS_LIST != "x" ]; then
                OPTIONS_PART=$OPTIONS_PART" -s "$SECONDARY_SERVERS_LIST
            fi
        else
            echo "Invalid configuration... PRIMARY_SERVER/PRIMARY_SERVERS not found"
            exit 1
        fi
    fi
    if [ "x"$FIELD_NAME != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -f "$FIELD_NAME
    fi
    if [ "x"$READ_BUFFER_SIZE != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -b "$READ_BUFFER_SIZE
    fi
    if [ "x"$PROCESS_NICE != "x" ]; then
        NICE_PART="nice -n "$PROCESS_NICE
        # OPTIONS_PART=$OPTIONS_PART" -n "$PROCESS_NICE
        # if perl script run with 'nice -n -1', then tail (forked by perl) runs also run as -1.
    fi
    if [ "x"$TAIL_PATH != "x" ]; then
        if [ ! -x $TAIL_PATH ]; then
            echo "invalid tail path: "$TAIL_PATH
            exit 1
        fi
        OPTIONS_PART=$OPTIONS_PART" -t "$TAIL_PATH
    fi
    if [ "x"$TAIL_INTERVAL != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -i "$TAIL_INTERVAL
    fi
    if [ "x"$PING_TAG != "x" ]; then
        if [ "x"$PING_DATA = "x" ]; then
            echo "ping data PING_DATA not specified"
            exit 1
        fi
        OPTIONS_PART=$OPTIONS_PART" -P "$PING_TAG":"$PING_DATA
        if [ "x"$PING_INTERVAL != "x" ]; then
            OPTIONS_PART=$OPTIONS_PART" -S "$PING_INTERVAL
        fi
    fi
    if [ "x"$DRAIN_LOG_TAG != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -d "$DRAIN_LOG_TAG
    fi
    if [ "x"$KEEPALIVE_TIME != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -k "$KEEPALIVE_TIME
    fi
    if [ "x"$LOG_PATH != "x" ]; then
        OPTIONS_PART=$OPTIONS_PART" -l "$LOG_PATH
    fi
    if [ "x"$LOG_VERBOSE != "x" ]; then
        if [ $LOG_VERBOSE != "no" -a $LOG_VERBOSE != "0" -a $LOG_VERBOSE != "false" ]; then
            OPTIONS_PART=$OPTIONS_PART" -v"
        fi
    fi
    PREPARE_GLOBAL="x"
}

function build_command_line {
    pos=$1
    
    prepare_build

    lineno=$((pos + 1))
    line=$(echo "$LOGS" | grep -v '^#' | tail -n $lineno | head -n 1)

    tag=$(echo $line | awk '{print $1;}')
    tag=$TAG_PREFIX_STRING$tag

    path=$(echo $line | awk '{print $2;}')

    echo -n $NICE_PART $PERL_PATH $scriptpath $OPTIONS_PART $tag $path $ARGS_SERVER_PART
    return 0
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart)
        stop && start
        ;;
  reload)
        reload
        ;;
  *)
        echo $"Usage: $prog {start|stop|restart|reload|status}"
        exit 1
esac

exit $RETVAL
